The following files have not been committed
	deleted:    changes.log
	deleted:    todo.log
	modified:   ProjectAnalyze.sh
	modified:   error.log
	modified:   testscript.sh
Current git diff:

File diff: Assign1/ProjectAnalyze.sh
    46|    46| #----AutoPull (feature)----
    47|    47| #if autopull flag set will try to autopull stuffs
    48|    48| if [[ $Pull = "True" ]]; then
    49|      |-	$(git pull)
      |    49|+	git pull
    50|    50| fi
    51|    51| 
    52|    52| #----Find uncommitted changes I ----
_________________________
   189|   189| > $TodoLog #clears log
   190|   190| 
   191|   191| if [[ $Moore = "False" ]]; then
   192|      |-	FMoore=",$TodoLog,$Changelog"
      |   192|+	Todo=$(grep -rnIE --exclude=ProjectAnalyze.sh "--exclude=$Changelog" "--exclude=$TodoLog" "//TODO|#TODO") #//TODO cause I use java a lot
      |   193|+else
      |   194|+	Todo=$(grep -rnIE --exclude=ProjectAnalyze.sh "//TODO|#TODO") #//TODO cause I use java a lot
   193|   195| fi
   194|      |-Todo=$(grep -rnIE --exclude={ProjectAnalyze.sh$FMoore} "//TODO|#TODO") #//TODO cause I use java a lot
      |   196|+
   195|   197| 
   196|   198| LastFile=">>Null" #>> cause that's illegal in filenames
   197|   199| while IFS= read -r line; do
_________________________
   244|   246| 		# line drop from https://stackoverflow.com/questions/4881930/remove-the-last-line-from-a-file-in-bash
   245|   247| 		head -n -1 "$hsFile" > tmp.hs; mv tmp.hs "$hsFile"
   246|   248| 	fi
   247|      |-	echo >> "$ErrorLog"
   248|      |-	if [[ $Report = "True" ]]; then
   249|      |-		echo "</pre></div><h3> $hsFile </h3><div class = \"Errorbody\"><pre>" >> "$ErrorLog"
   250|      |-	else
   251|      |-		echo "File: $hsFile" >> "$ErrorLog"
      |   249|+	if [[ -n $HSErr ]]; then
      |   250|+		echo >> "$ErrorLog"
      |   251|+		if [[ $Report = "True" ]]; then
      |   252|+			echo "</pre></div><h3> $hsFile </h3><div class = \"Errorbody\"><pre>" >> "$ErrorLog"
      |   253|+		else
      |   254|+			echo "File: $hsFile" >> "$ErrorLog"
      |   255|+		fi
      |   256|+		echo "$HSErr" | sed -e "/^ *$/d" >> "$ErrorLog"
   252|   257| 	fi
   253|      |-	echo "$HSErr" | sed -e "/^ *$/d" >> "$ErrorLog"
   254|   258| done
   255|   259| 
   256|   260| if [[ $Report = "True" ]];then
_________________________

File diff: Assign1/error.log
     1|      |-<!DOCTYPE html> <html><head><title>Haskell ErrorLog</title><style>.Errorbody{background-color:#CCCCCC}h3{text-align:center;text-decoration:underline}</style></head>
     2|      |-<body><div><pre>
     3|     1| 
     4|      |-</pre></div><h3> rand.hs </h3><div class = "Errorbody"><pre>
      |     2|+File: rand.hs
     5|     3| rand.hs:1:13: error: parse error on input `->'
     6|     4|   |
     7|     5| 1 | rand = Long -> Float
     8|     6|   |             ^^
     9|      |-
    10|      |-</pre></div><h3> test.hs </h3><div class = "Errorbody"><pre>
    11|      |-</pre></div></body></html>
_________________________

File diff: Assign1/testscript.sh
     1|     1| #!/git-bash.exe
     2|     2| 
     3|      |-Status=$(ghc -fno-code test.hs 2>&1 >/dev/null)
     4|      |-if [[ $Status =~ .*The\ IO\ action\ .main.\ is\ not\ defined\ [i]n\ module\ .Main..*  ]]
     5|      |-then
     6|      |-	echo "Found"
     7|      |-fi
      |     3|+Something="--exclude=changes.log --exclude=todo.log"
     8|     4| 
      |     5|+grep -rnIE "$Something" "#TODO"
