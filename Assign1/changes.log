The following files have not been committed
	untracked:  todo.log
	modified:   ProjectAnalyze.sh
	deleted:    changes.log
Current git diff:

File diff: Assign1/ProjectAnalyze.sh
    17|    17| 
    18|    18| # random variable, not sure if I'll use it
    19|    19| UPTODATE=$(git pull)
    20|      |-
      |    20|+#TODO fix this part
    21|    21| 
    22|    22| #----Find uncommitted changes I ----
    23|    23| #AKA feature # 1 adds the stuff form git status to the diff stuff
_________________________
   147|   147| done <<< $Diff
   148|   148| #---- FIND TODO ----
   149|   149| 
      |   150|+
      |   151|+PadL=5 # new padding length for this part
      |   152|+
   150|   153| TodoLog="todo.log"
   151|   154| > $TodoLog #clears log
   152|   155| 
   153|      |-grep -rnI --exclude=ProjectAnalyze.sh "#TODO" ?> $TodoLog
   154|      |-grep -rnI --exclude=ProjectAnalyze.sh "//TODO" >> $TodoLog # cause I program in java a lot
      |   156|+Todo=$(grep -rnIE --exclude=ProjectAnalyze.sh "//TODO|#TODO") #//TODO cause I use java a lot
      |   157|+
      |   158|+LastFile=">>Null" #>> cause that's illegal in filenames
      |   159|+while IFS= read -r line; do
      |   160|+	if [ -n "$line" ]
      |   161|+	then
      |   162|+		#get the general content from the grep strings
      |   163|+		File=$(echo "$line" | sed -re "s/([^:]*).*/\1/")
      |   164|+		LineNum=$(echo "$line" | sed -re "s/[^:]*:([0-9]*):.*/\1/")
      |   165|+		Content=$(echo "$line" | sed -re "s/[^:]*:[0-9]*:(.*)/\1/")
      |   166|+		if [ "$File" != "$LastFile" ]
      |   167|+		then
      |   168|+			echo "File: $File" >> "$TodoLog"
      |   169|+			LastFile=$File
      |   170|+		fi
      |   171|+		PadN=$(( $PadL - ${#LineNum} ))
      |   172|+		$(printf '%0.*s%s|%s' "$PadN" "$Pad" "$LineNum" "$Content" >> "$TodoLog")
      |   173|+		echo >> "$TodoLog"
      |   174|+	fi
      |   175|+
      |   176|+done <<< $Todo
   155|   177| 
   156|   178| #TODO seriously cleanup the messy output of grep, file headings, and then the lines found similar format to diff
   157|   179| 
   158|   180| #----Count Code Lines----
   159|      |-#Cause literally this is a command I use all the time
      |   181|+#Cause literally this is a command I use all the time to see how close I am to 10k lines
      |   182|+
      |   183|+echo "Lines of code = $(find -name "*.hs" -print0 | xargs -0 wc -l )"
   160|   184| 
   161|   185| #TODO
_________________________

File deleted: Assign1/changes.log
     1|      |-The following files have not been committed
     2|      |-	untracked:  todo.log
     3|      |-	modified:   ProjectAnalyze.sh
     4|      |-	deleted:    changes.log
     5|      |-	modified:   testscript.sh
     6|      |-Current git diff:
     7|      |-
     8|      |-File diff: Assign1/ProjectAnalyze.sh
     9|      |-     1|     1| #!/git-bash.exe
    10|      |-     2|     2| 
    11|      |-      |     3|+#change git-bash to bash.exe @NotAProfDalves, stuff is broken on my computer so only the github cli bash works
    12|      |-      |     4|+
    13|      |-     3|     5| #Potential feature turning some of this stuff into HTML if -report flag in args?
    14|      |-     4|     6| 
    15|      |-      |     7|+#----Arugment Parsing----
    16|      |-      |     8|+#sourced from https://stackoverflow.com/questions/255898/how-to-iterate-over-arguments-in-a-bash-script
    17|      |-      |     9|+for arg in "$@"
    18|      |-      |    10|+do
    19|      |-      |    11|+	Nothing="Nothing" #here to avoid errors for the moment
    20|      |-      |    12|+	#TODO stuff to parse the arguments
    21|      |-      |    13|+done
    22|      |-      |    14|+
    23|      |-      |    15|+
    24|      |-      |    16|+
    25|      |-      |    17|+
    26|      |-     5|    18| # random variable, not sure if I'll use it
    27|      |-     6|    19| UPTODATE=$(git pull)
    28|      |-     7|    20| 
    29|      |-_________________________
    30|      |-    66|    79| PadL=6
    31|      |-    67|    80| 
    32|      |-    68|    81| #iterate over the lines of the diff stuff
    33|      |-    69|      |-while read -r line; do
    34|      |-      |    82|+#IFS keep leading spaces from https://stackoverflow.com/questions/29689172/bash-read-line-does-not-read-leading-spaces 
    35|      |-      |    83|+while IFS= read -r line; do
    36|      |-    70|    84| 	if [ $ACodeCount -lt 1 -a $RCodeCount -lt 1 ]
    37|      |-    71|    85| 	then
    38|      |-    72|    86| 		if [ $Code = "True" ]
    39|      |-_________________________
    40|      |-    96|   110| 		elif [ "$Status" -eq "4" ]
    41|      |-    97|   111| 		then
    42|      |-    98|   112| 			# dump the file name into the changelog
    43|      |-    99|      |-			$(echo >> changes.log)
    44|      |-   100|      |-			$(echo "$line" | sed -e "s/^+++ b\//File diff: /;s/+++ \/dev\/null/File deleted: $Rem/" >> changes.log)
    45|      |-      |   113|+			$(echo >> "$Changelog")
    46|      |-      |   114|+			$(echo "$line" | sed -e "s/^+++ b\//File diff: /;s/+++ \/dev\/null/File deleted: $Rem/" >> "$Changelog" )
    47|      |-   101|   115| 		fi
    48|      |-   102|   116| 
    49|      |-   103|   117| 	elif [ $Code == "True" ]
    50|      |-_________________________
    51|      |-   107|   121| 		if [ "$Start" = "+" ]
    52|      |-   108|   122| 		then
    53|      |-   109|   123| 			PadA=$(( $PadL - ${#ANum} ))
    54|      |-   110|      |-			$(printf '%*.*s%s|%*.*s%s|%s' 0 "$PadL" "$Pad" "" 0 "$PadA" "$Pad" "$ANum" "$line" >> changes.log)
    55|      |-      |   124|+			$(printf '%*.*s%s|%*.*s%s|%s' 0 "$PadL" "$Pad" "" 0 "$PadA" "$Pad" "$ANum" "$line" >> "$Changelog")
    56|      |-   111|   125| 			ANum=$(( $ANum + 1 ))
    57|      |-   112|   126| 			ACodeCount=$(( $ACodeCount - 1 ))
    58|      |-   113|   127| 		elif [ "$Start" = "-" ]
    59|      |-   114|   128| 		then
    60|      |-   115|   129| 			PadR=$(( $PadL - ${#RNum} ))
    61|      |-   116|      |-			$(printf '%*.*s%s|%*.*s%s|%s' 0 "$PadR" "$Pad" "$RNum" 0 "$PadL" "$Pad" "" "$line" >> changes.log)
    62|      |-      |   130|+			$(printf '%*.*s%s|%*.*s%s|%s' 0 "$PadR" "$Pad" "$RNum" 0 "$PadL" "$Pad" "" "$line" >> "$Changelog")
    63|      |-   117|   131| 			RNum=$(( $RNum + 1 ))
    64|      |-   118|   132| 			RCodeCount=$(( $RCodeCount - 1 ))
    65|      |-   119|   133| 		else
    66|      |-   120|   134| 			PadR=$(( $PadL - ${#RNum} ))
    67|      |-   121|   135| 			PadA=$(( $PadL - ${#ANum} ))
    68|      |-   122|      |-			$(printf '%*.*s%s|%*.*s%s|%s' 0 "$PadR" "$Pad" "$RNum" 0 "$PadA" "$Pad" "$ANum" "$line" >> changes.log)
    69|      |-      |   136|+			$(printf '%*.*s%s|%*.*s%s|%s' 0 "$PadR" "$Pad" "$RNum" 0 "$PadA" "$Pad" "$ANum" "$line" >> "$Changelog")
    70|      |-   123|   137| 			#increment decrement stuff
    71|      |-   124|   138| 			RNum=$(( $RNum + 1 ))
    72|      |-   125|   139| 			ANum=$(( $ANum + 1 ))
    73|      |-_________________________
    74|      |-   127|   141| 			ACodeCount=$(( $ACodeCount - 1 ))
    75|      |-   128|   142| 		fi
    76|      |-   129|   143| 			
    77|      |-   130|      |-		$(echo >> changes.log) #to add newline
    78|      |-      |   144|+		$(echo >> "$Changelog") #to add newline
    79|      |-   131|   145| 	fi
    80|      |-   132|   146| 
    81|      |-   133|   147| done <<< $Diff
    82|      |-   134|   148| #---- FIND TODO ----
    83|      |-   135|   149| 
    84|      |-      |   150|+TodoLog="todo.log"
    85|      |-      |   151|+> $TodoLog #clears log
    86|      |-      |   152|+
    87|      |-      |   153|+grep -rnI --exclude=ProjectAnalyze.sh "#TODO" ?> $TodoLog
    88|      |-      |   154|+grep -rnI --exclude=ProjectAnalyze.sh "//TODO" >> $TodoLog # cause I program in java a lot
    89|      |-   136|   155| 
    90|      |-      |   156|+#TODO seriously cleanup the messy output of grep, file headings, and then the lines found similar format to diff
    91|      |-   137|   157| 
    92|      |-      |   158|+#----Count Code Lines----
    93|      |-      |   159|+#Cause literally this is a command I use all the time
    94|      |-   138|   160| 
    95|      |-      |   161|+#TODO
    96|      |-_________________________
    97|      |-
    98|      |-File deleted: Assign1/changes.log
    99|      |-     1|      |-The following files have not been committed
   100|      |-     2|      |-	modified:   ProjectAnalyze.sh
   101|      |-     3|      |-	deleted:    changes.log
   102|      |-     4|      |-Current git diff:
   103|      |-     5|      |-
   104|      |-     6|      |-File diff: Assign1/ProjectAnalyze.sh
   105|      |-     7|      |-    90|    90|ANum=$(echo "$line" | sed -e "s/^@@ -[0-9]*,[0-9]* +\([0-9]*\),.*/\1/")
   106|      |-     8|      |-    91|    91|RCodeCount=$(echo "$line" | sed -e "s/^@@ -[0-9]*,\([0-9]*\) .*/\1/")
   107|      |-     9|      |-    92|    92|ACodeCount=$(echo "$line" | sed -e "s/^@@ -[0-9]*,[0-9]* +[0-9]*,\([0-9]*\).*/\1/")
   108|      |-    10|      |-    93|      |-			#TODO print stuff to changelog
   109|      |-    11|      |-    94|      |-
   110|      |-    12|      |-      |    93|+		elif [ "$Status" -eq "3" ]
   111|      |-    13|      |-      |    94|+		then
   112|      |-    14|      |-      |    95|+			Rem=$(echo "$line" | sed -e "s/^--- a\///;s:/:\\\/:g") # file removed to fix def/null issue
   113|      |-    15|      |-    95|    96|elif [ "$Status" -eq "4" ]
   114|      |-    16|      |-    96|    97|then
   115|      |-    17|      |-    97|    98|# dump the file name into the changelog
   116|      |-    18|      |-    98|    99|$(echo >> changes.log)
   117|      |-    19|      |-    99|      |-			$(echo "$line" | sed -e "s/^+++ b\//File diff: /" >> changes.log)
   118|      |-    20|      |-      |   100|+			$(echo "$line" | sed -e "s/^+++ b\//File diff: /;s/+++ \/dev\/null/File deleted: $Rem/" >> changes.log)
   119|      |-    21|      |-   100|   101|fi
   120|      |-    22|      |-   101|   102|
   121|      |-    23|      |-   102|   103|elif [ $Code == "True" ]
   122|      |-    24|      |-   103|   104|then
   123|      |-    25|      |-   104|      |-
   124|      |-    26|      |-   105|   105|#Print lines, numbering etc
   125|      |-    27|      |-   106|   106|Start=$(echo $line | sed -e "s/\(.\).*/\1/")
   126|      |-    28|      |-   107|   107|if [ "$Start" = "+" ]
   127|      |-    29|      |-_________________________
   128|      |-    30|      |-
   129|      |-    31|      |-File deleted: Assign1/changes.log
   130|      |-    32|      |-     1|      |-The following files have not been committed
   131|      |-    33|      |-     2|      |-	modified:   ProjectAnalyze.sh
   132|      |-    34|      |-     3|      |-	deleted:    changes.log
   133|      |-    35|      |-     4|      |-Current git diff:
   134|      |-    36|      |-     5|      |-
   135|      |-    37|      |-     6|      |-File diff: Assign1/ProjectAnalyze.sh
   136|      |-    38|      |-     7|      |-    25|    25|untracked=$( git status | grep "Untracked files:" | wc -l )
   137|      |-    39|      |-     8|      |-    26|    26|
   138|      |-    40|      |-     9|      |-    27|    27|Status=$(git status)
   139|      |-    41|      |-    10|      |-    28|      |-
   140|      |-    42|      |-    11|      |-      |    28|+Diff=$( git diff )
   141|      |-    43|      |-    12|      |-    29|    29|
   142|      |-    44|      |-    13|      |-    30|    30|# clear changes.log
   143|      |-    45|      |-    14|      |-    31|      |-$( echo "The following files have not been committed" > "changes.log")
   144|      |-    46|      |-    15|      |-      |    31|+$( echo "The following files have not been committed" > "$Changelog")
   145|      |-    47|      |-    16|      |-    32|    32|
   146|      |-    48|      |-    17|      |-    33|    33|# if there are untracked files
   147|      |-    49|      |-    18|      |-    34|    34|if [ $untracked -eq 1 ]
   148|      |-    50|      |-    19|      |-    35|    35|then
   149|      |-    51|      |-    20|      |-    36|    36|#adds untracked tag to untracked files, after getting them
   150|      |-    52|      |-    21|      |-    37|      |-	$( echo "$Status" | sed -e "$STATUSCLEAN;/Untracked files:/d;/:/d;s/^	/	untracked:  /g" > "changes.log" )
   151|      |-    53|      |-    22|      |-      |    37|+	$( echo "$Status" | sed -e "$STATUSCLEAN;/Untracked files:/d;/:/d;s/^	/	untracked:  /g" >> "$Changelog" )
   152|      |-    54|      |-    23|      |-    38|    38|STATUSCLEAN="$STATUSCLEAN;/Untracked files:/,\$d" # delete all after line sourced from https://stackoverflow.com/questions/5227295/how-do-i-delete-all-lines-in-a-file-starting-from-after-a-matching-line
   153|      |-    55|      |-    24|      |-    39|    39|fi
   154|      |-    56|      |-    25|      |-    40|    40|
   155|      |-    57|      |-    26|      |-    41|    41|# get other changes
   156|      |-    58|      |-    27|      |-    42|      |-$( echo "$Status" | sed "$STATUSCLEAN;/Changes to be committed:/d;/Changes not staged for commit:/d" >> "changes.log" )
   157|      |-    59|      |-    28|      |-      |    42|+$( echo "$Status" | sed "$STATUSCLEAN;/Changes to be committed:/d;/Changes not staged for commit:/d" >> "$Changelog" )
   158|      |-    60|      |-    29|      |-    43|    43|
   159|      |-    61|      |-    30|      |-    44|    44|
   160|      |-    62|      |-    31|      |-    45|    45|#---- Find uncommitted changes II ----
   161|      |-    63|      |-    32|      |-    46|    46|#uses git diff prints in a cleaner style than default with lines numbered and all that
   162|      |-    64|      |-    33|      |-    47|    47|
   163|      |-    65|      |-    34|      |-    48|      |-Diff=$( git diff )
   164|      |-    66|      |-    35|      |-    49|    48|
   165|      |-    67|      |-    36|      |-    50|      |-$(echo "Current git diff:" >> changes.log)
   166|      |-    68|      |-    37|      |-      |    49|+$(echo "Current git diff:" >> "$Changelog")
   167|      |-    69|      |-    38|      |-    51|    50|
   168|      |-    70|      |-    39|      |-    52|    51|#iterate over lines https://superuser.com/questions/284187/bash-iterating-over-lines-in-a-variable
   169|      |-    71|      |-    40|      |-    53|    52|
   170|      |-    72|      |-    41|      |-_________________________
   171|      |-    73|      |-    42|      |-    68|    67|
   172|      |-    74|      |-    43|      |-    69|    68|#iterate over the lines of the diff stuff
   173|      |-    75|      |-    44|      |-    70|    69|while read -r line; do
   174|      |-    76|      |-    45|      |-      |    70|+	if [ $ACodeCount -lt 1 -a $RCodeCount -lt 1 ]
   175|      |-    77|      |-    46|      |-      |    71|+	then
   176|      |-    78|      |-    47|      |-      |    72|+		if [ $Code = "True" ]
   177|      |-    79|      |-    48|      |-      |    73|+		then
   178|      |-    80|      |-    49|      |-      |    74|+			$(printf '%0.1s' "_"{1..25} >> "$Changelog") # so it's much clearer where the code fragments are
   179|      |-    81|      |-    50|      |-      |    75|+			$(echo >> "$Changelog") # nl cause printf%n doesn't work for some reason
   180|      |-    82|      |-    51|      |-      |    76|+		fi
   181|      |-    83|      |-    52|      |-      |    77|+		Code="False"
   182|      |-    84|      |-    53|      |-      |    78|+	fi
   183|      |-    85|      |-    54|      |-      |    79|+
   184|      |-    86|      |-    55|      |-    71|    80|#non code lines either of 5 types
   185|      |-    87|      |-    56|      |-    72|    81|if [ "$Code" == "False" ]
   186|      |-    88|      |-    57|      |-    73|    82|then
   187|      |-    89|      |-    58|      |-_________________________
   188|      |-    90|      |-    59|      |-    92|   101|
   189|      |-    91|      |-    60|      |-    93|   102|elif [ $Code == "True" ]
   190|      |-    92|      |-    61|      |-    94|   103|then
   191|      |-    93|      |-    62|      |-    95|      |-		if [ $ACodeCount -eq 0 -a $RCodeCount -eq 0 ]
   192|      |-    94|      |-    63|      |-      |   104|+
   193|      |-    95|      |-    64|      |-      |   105|+		#Print lines, numbering etc
   194|      |-    96|      |-    65|      |-      |   106|+		Start=$(echo $line | sed -e "s/\(.\).*/\1/")
   195|      |-    97|      |-    66|      |-      |   107|+		if [ "$Start" = "+" ]
   196|      |-    98|      |-    67|      |-      |   108|+		then
   197|      |-    99|      |-    68|      |-      |   109|+			PadA=$(( $PadL - ${#ANum} ))
   198|      |-   100|      |-    69|      |-      |   110|+			$(printf '%*.*s%s|%*.*s%s|%s' 0 "$PadL" "$Pad" "" 0 "$PadA" "$Pad" "$ANum" "$line" >> changes.log)
   199|      |-   101|      |-    70|      |-      |   111|+			ANum=$(( $ANum + 1 ))
   200|      |-   102|      |-    71|      |-      |   112|+			ACodeCount=$(( $ACodeCount - 1 ))
   201|      |-   103|      |-    72|      |-      |   113|+		elif [ "$Start" = "-" ]
   202|      |-   104|      |-    73|      |-    96|   114|then
   203|      |-   105|      |-    74|      |-    97|      |-			Code="False"
   204|      |-   106|      |-    75|      |-    98|      |-			#TODO everything else and determine what the code count must be equal to in order to switch out of this state
   205|      |-   107|      |-    76|      |-      |   115|+			PadR=$(( $PadL - ${#RNum} ))
   206|      |-   108|      |-    77|      |-      |   116|+			$(printf '%*.*s%s|%*.*s%s|%s' 0 "$PadR" "$Pad" "$RNum" 0 "$PadL" "$Pad" "" "$line" >> changes.log)
   207|      |-   109|      |-    78|      |-      |   117|+			RNum=$(( $RNum + 1 ))
   208|      |-   110|      |-    79|      |-      |   118|+			RCodeCount=$(( $RCodeCount - 1 ))
   209|      |-   111|      |-    80|      |-    99|   119|else
   210|      |-   112|      |-    81|      |-   100|      |-			#Print lines, numbering etc
   211|      |-   113|      |-    82|      |-   101|      |-			Start=$(echo $line | sed -e "s/\(.\).*/\1/")
   212|      |-   114|      |-    83|      |-   102|      |-			if [ "$Start" = "+" ]
   213|      |-   115|      |-    84|      |-   103|      |-			then
   214|      |-   116|      |-    85|      |-   104|      |-				PadA=$(( $PadL - ${#ANum} ))
   215|      |-   117|      |-    86|      |-   105|      |-				$(printf '%*.*s%s|%*.*s%s|%s' 0 "$PadL" "$Pad" "" 0 "$PadA" "$Pad" "$ANum" "$line" >> changes.log)
   216|      |-   118|      |-    87|      |-   106|      |-				ANum=$(( $ANum + 1 ))
   217|      |-   119|      |-    88|      |-   107|      |-				ACodeCount=$(( $ACodeCount - 1 ))
   218|      |-   120|      |-    89|      |-   108|      |-			elif [ "$Start" = "-" ]
   219|      |-   121|      |-    90|      |-   109|      |-			then
   220|      |-   122|      |-    91|      |-   110|      |-				PadR=$(( $PadL - ${#RNum} ))
   221|      |-   123|      |-    92|      |-   111|      |-				$(printf '%*.*s%s|%*.*s%s|%s' 0 "$PadR" "$Pad" "$RNum" 0 "$PadL" "$Pad" "" "$line" >> changes.log)
   222|      |-   124|      |-    93|      |-   112|      |-				RNum=$(( $RNum + 1 ))
   223|      |-   125|      |-    94|      |-   113|      |-				RCodeCount=$(( $RCodeCount - 1 ))
   224|      |-   126|      |-    95|      |-   114|      |-			else
   225|      |-   127|      |-    96|      |-   115|      |-				PadR=$(( $PadL - ${#RNum} ))
   226|      |-   128|      |-    97|      |-   116|      |-				PadA=$(( $PadL - ${#ANum} ))
   227|      |-   129|      |-    98|      |-   117|      |-				$(printf '%*.*s%s|%*.*s%s|%s' 0 "$PadR" "$Pad" "$RNum" 0 "$PadA" "$Pad" "$ANum" "$line" >> changes.log)
   228|      |-   130|      |-    99|      |-   118|      |-				#increment decrement stuff
   229|      |-   131|      |-   100|      |-   119|      |-				RNum=$(( $RNum + 1 ))
   230|      |-   132|      |-   101|      |-   120|      |-				ANum=$(( $ANum + 1 ))
   231|      |-   133|      |-   102|      |-   121|      |-				RCodeCount=$(( $RCodeCount - 1 ))
   232|      |-   134|      |-   103|      |-   122|      |-				ACodeCount=$(( $ACodeCount - 1 ))
   233|      |-   135|      |-   104|      |-   123|      |-
   234|      |-   136|      |-   105|      |-   124|      |-			fi
   235|      |-   137|      |-   106|      |-   125|      |-
   236|      |-   138|      |-   107|      |-   126|      |-			$(echo >> changes.log) #to add newline
   237|      |-   139|      |-   108|      |-   127|      |-
   238|      |-   140|      |-   109|      |-   128|      |-
   239|      |-   141|      |-   110|      |-      |   120|+			PadR=$(( $PadL - ${#RNum} ))
   240|      |-   142|      |-   111|      |-      |   121|+			PadA=$(( $PadL - ${#ANum} ))
   241|      |-   143|      |-   112|      |-      |   122|+			$(printf '%*.*s%s|%*.*s%s|%s' 0 "$PadR" "$Pad" "$RNum" 0 "$PadA" "$Pad" "$ANum" "$line" >> changes.log)
   242|      |-   144|      |-   113|      |-      |   123|+			#increment decrement stuff
   243|      |-   145|      |-   114|      |-      |   124|+			RNum=$(( $RNum + 1 ))
   244|      |-   146|      |-   115|      |-      |   125|+			ANum=$(( $ANum + 1 ))
   245|      |-   147|      |-   116|      |-      |   126|+			RCodeCount=$(( $RCodeCount - 1 ))
   246|      |-   148|      |-   117|      |-      |   127|+			ACodeCount=$(( $ACodeCount - 1 ))
   247|      |-   149|      |-   118|      |-   129|   128|fi
   248|      |-   150|      |-   119|      |-   130|      |-
   249|      |-   151|      |-   120|      |-      |   129|+
   250|      |-   152|      |-   121|      |-      |   130|+		$(echo >> changes.log) #to add newline
   251|      |-   153|      |-   122|      |-   131|   131|fi
   252|      |-   154|      |-   123|      |-   132|   132|
   253|      |-   155|      |-   124|      |-   133|   133|done <<< $Diff
   254|      |-   156|      |-   125|      |-_________________________
   255|      |-   157|      |-   126|      |-
   256|      |-   158|      |-   127|      |-+++ /dev/null
   257|      |-   159|      |-   128|      |-     1|      |-	untracked:  change.log
   258|      |-   160|      |-   129|      |-     2|      |-	modified:   ProjectAnalyze.sh
   259|      |-   161|      |-   130|      |-     3|      |-	modified:   testscript.sh
   260|      |-   162|      |-   131|      |-     4|      |-Current git diff:
   261|      |-   163|      |-   132|      |-     5|      |-
   262|      |-   164|      |-   133|      |-     6|      |-File diff: Assign1/ProjectAnalyze.sh
   263|      |-   165|      |-   134|      |-     7|      |-     1|     1|#!/git-bash.exe
   264|      |-   166|      |-   135|      |-     8|      |-     2|     2|
   265|      |-   167|      |-   136|      |-     9|      |-      |     3|+#Potential feature turning some of this stuff into HTML if -report flag in args?
   266|      |-   168|      |-   137|      |-    10|      |-      |     4|+
   267|      |-   169|      |-   138|      |-    11|      |-     3|     5|# random variable, not sure if I'll use it
   268|      |-   170|      |-   139|      |-    12|      |-     4|     6|UPTODATE=$(git pull)
   269|      |-   171|      |-   140|      |-    13|      |-     5|     7|
   270|      |-   172|      |-   141|      |-    14|      |-    58|    60|#Numbers to count code line
   271|      |-   173|      |-   142|      |-    15|      |-    59|    61|RNum="0"
   272|      |-   174|      |-   143|      |-    16|      |-    60|    62|ANum="0"
   273|      |-   175|      |-   144|      |-    17|      |-    61|      |-
   274|      |-   176|      |-   145|      |-    18|      |-      |    63|+#padding altered from the following https://stackoverflow.com/questions/4409399/padding-characters-in-printf
   275|      |-   177|      |-   146|      |-    19|      |-      |    64|+#literally just a bunch of spaces
   276|      |-   178|      |-   147|      |-    20|      |-      |    65|+Pad=$(printf '%0.1s' " "{1..60})
   277|      |-   179|      |-   148|      |-    21|      |-      |    66|+#length to pad the numbers
   278|      |-   180|      |-   149|      |-    22|      |-      |    67|+PadL=6
   279|      |-   181|      |-   150|      |-    23|      |-    62|    68|
   280|      |-   182|      |-   151|      |-    24|      |-    63|    69|#iterate over the lines of the diff stuff
   281|      |-   183|      |-   152|      |-    25|      |-    64|    70|while read -r line; do
   282|      |-   184|      |-   153|      |-    26|      |-    65|    71|#non code lines either of 5 types
   283|      |-   185|      |-   154|      |-    27|      |-    66|      |-	if [ $Code == "False" ]
   284|      |-   186|      |-   155|      |-    28|      |-      |    72|+	if [ "$Code" == "False" ]
   285|      |-   187|      |-   156|      |-    29|      |-    67|    73|then
   286|      |-   188|      |-   157|      |-    30|      |-    68|    74|#use multi sed command to get what exactly the non code line is
   287|      |-   189|      |-   158|      |-    31|      |-    69|      |-		Status=$(echo $line | sed -e "s/^diff --git.*/1/;s/^index.*/2/;s/^---.*/3/;s/^+++.*/4/;s/^@@.*/5/;s/[^1-5]/6/;s/\(.\).*/\1/")
   288|      |-   190|      |-   159|      |-    32|      |-      |    75|+		Status=$(echo "$line" | sed -e "s/^diff --git.*/1/;s/^index.*/2/;s/^---.*/3/;s/^+++.*/4/;s/^@@.*/5/;s/[^1-5]/6/;s/\(.\).*/\1/;s/^$/6/")
   289|      |-   191|      |-   160|      |-    33|      |-    70|    76|#1 = first line 2 = index objects 3 = --- 4 = +++ 5 = @@ aka start of code 6 = mode or something, too difficult to match easily
   290|      |-   192|      |-   161|      |-    34|      |-    71|      |-		if [ $Status -eq 5 ]
   291|      |-   193|      |-   162|      |-    35|      |-      |    77|+		if [ "$Status" -eq "5" ]
   292|      |-   194|      |-   163|      |-    36|      |-    72|    78|then
   293|      |-   195|      |-   164|      |-    37|      |-    73|    79|Code="True"
   294|      |-   196|      |-   165|      |-    38|      |-    74|      |-			RNum=$(echo $line | sed -e "s/^@@ -\([0-9]*\),.*/\1/")
   295|      |-   197|      |-   166|      |-    39|      |-    75|      |-			ANum=$(echo $line | sed -e "s/^@@ -[0-9]*,[0-9]* +\([0-9]*\),.*/\1/")
   296|      |-   198|      |-   167|      |-    40|      |-    76|      |-			RCodeCount=$(echo $line | sed -e "s/^@@ -[0-9]*,\([0-9]*\) .*/\1/")
   297|      |-   199|      |-   168|      |-    41|      |-    77|      |-			ACodeCount=$(echo $line | sed -e "s/^@@ -[0-9]*,[0-9]* +[0-9]*,\([0-9]*\).*/\1/")
   298|      |-   200|      |-   169|      |-    42|      |-      |    80|+			RNum=$(echo "$line" | sed -e "s/^@@ -\([0-9]*\),.*/\1/")
   299|      |-   201|      |-   170|      |-    43|      |-      |    81|+			ANum=$(echo "$line" | sed -e "s/^@@ -[0-9]*,[0-9]* +\([0-9]*\),.*/\1/")
   300|      |-   202|      |-   171|      |-    44|      |-      |    82|+			RCodeCount=$(echo "$line" | sed -e "s/^@@ -[0-9]*,\([0-9]*\) .*/\1/")
   301|      |-   203|      |-   172|      |-    45|      |-      |    83|+			ACodeCount=$(echo "$line" | sed -e "s/^@@ -[0-9]*,[0-9]* +[0-9]*,\([0-9]*\).*/\1/")
   302|      |-   204|      |-   173|      |-    46|      |-    78|    84|#TODO print stuff to changelog
   303|      |-   205|      |-   174|      |-    47|      |-    79|    85|
   304|      |-   206|      |-   175|      |-    48|      |-    80|      |-		elif [$Status -eq 4]
   305|      |-   207|      |-   176|      |-    49|      |-      |    86|+		elif [ "$Status" -eq "4" ]
   306|      |-   208|      |-   177|      |-    50|      |-    81|    87|then
   307|      |-   209|      |-   178|      |-    51|      |-    82|    88|# dump the file name into the changelog
   308|      |-   210|      |-   179|      |-    52|      |-    83|      |-			$(echo $line | sed -e "s/^+++ b\//File diff: /" >> changes.log)
   309|      |-   211|      |-   180|      |-    53|      |-      |    89|+			$(echo >> changes.log)
   310|      |-   212|      |-   181|      |-    54|      |-      |    90|+			$(echo "$line" | sed -e "s/^+++ b\//File diff: /" >> changes.log)
   311|      |-   213|      |-   182|      |-    55|      |-    84|    91|fi
   312|      |-   214|      |-   183|      |-    56|      |-    85|      |-		echo $Status
   313|      |-   215|      |-   184|      |-    57|      |-    86|    92|
   314|      |-   216|      |-   185|      |-    58|      |-    87|    93|elif [ $Code == "True" ]
   315|      |-   217|      |-   186|      |-    59|      |-    88|    94|then
   316|      |-   218|      |-   187|      |-    60|      |-    89|      |-		if [ $CodeCount -eq 0 ]
   317|      |-   219|      |-   188|      |-    61|      |-      |    95|+		if [ $ACodeCount -eq 0 -a $RCodeCount -eq 0 ]
   318|      |-   220|      |-   189|      |-    62|      |-    90|    96|then
   319|      |-   221|      |-   190|      |-    63|      |-    91|    97|Code="False"
   320|      |-   222|      |-   191|      |-    64|      |-    92|    98|#TODO everything else and determine what the code count must be equal to in order to switch out of this state
   321|      |-   223|      |-   192|      |-    65|      |-      |    99|+		else
   322|      |-   224|      |-   193|      |-    66|      |-      |   100|+			#Print lines, numbering etc
   323|      |-   225|      |-   194|      |-    67|      |-      |   101|+			Start=$(echo $line | sed -e "s/\(.\).*/\1/")
   324|      |-   226|      |-   195|      |-    68|      |-      |   102|+			if [ "$Start" = "+" ]
   325|      |-   227|      |-   196|      |-    69|      |-      |   103|+			then
   326|      |-   228|      |-   197|      |-    70|      |-      |   104|+				PadA=$(( $PadL - ${#ANum} ))
   327|      |-   229|      |-   198|      |-    71|      |-      |   105|+				$(printf '%*.*s%s|%*.*s%s|%s' 0 "$PadL" "$Pad" "" 0 "$PadA" "$Pad" "$ANum" "$line" >> changes.log)
   328|      |-   230|      |-   199|      |-    72|      |-      |   106|+				ANum=$(( $ANum + 1 ))
   329|      |-   231|      |-   200|      |-    73|      |-      |   107|+				ACodeCount=$(( $ACodeCount - 1 ))
   330|      |-   232|      |-   201|      |-    74|      |-      |   108|+			elif [ "$Start" = "-" ]
   331|      |-   233|      |-   202|      |-    75|      |-      |   109|+			then
   332|      |-   234|      |-   203|      |-    76|      |-      |   110|+				PadR=$(( $PadL - ${#RNum} ))
   333|      |-   235|      |-   204|      |-    77|      |-      |   111|+				$(printf '%*.*s%s|%*.*s%s|%s' 0 "$PadR" "$Pad" "$RNum" 0 "$PadL" "$Pad" "" "$line" >> changes.log)
   334|      |-   236|      |-   205|      |-    78|      |-      |   112|+				RNum=$(( $RNum + 1 ))
   335|      |-   237|      |-   206|      |-    79|      |-      |   113|+				RCodeCount=$(( $RCodeCount - 1 ))
   336|      |-   238|      |-   207|      |-    80|      |-      |   114|+			else
   337|      |-   239|      |-   208|      |-    81|      |-      |   115|+				PadR=$(( $PadL - ${#RNum} ))
   338|      |-   240|      |-   209|      |-    82|      |-      |   116|+				PadA=$(( $PadL - ${#ANum} ))
   339|      |-   241|      |-   210|      |-    83|      |-      |   117|+				$(printf '%*.*s%s|%*.*s%s|%s' 0 "$PadR" "$Pad" "$RNum" 0 "$PadA" "$Pad" "$ANum" "$line" >> changes.log)
   340|      |-   242|      |-   211|      |-    84|      |-      |   118|+				#increment decrement stuff
   341|      |-   243|      |-   212|      |-    85|      |-      |   119|+				RNum=$(( $RNum + 1 ))
   342|      |-   244|      |-   213|      |-    86|      |-      |   120|+				ANum=$(( $ANum + 1 ))
   343|      |-   245|      |-   214|      |-    87|      |-      |   121|+				RCodeCount=$(( $RCodeCount - 1 ))
   344|      |-   246|      |-   215|      |-    88|      |-      |   122|+				ACodeCount=$(( $ACodeCount - 1 ))
   345|      |-   247|      |-   216|      |-    89|      |-      |   123|+
   346|      |-   248|      |-   217|      |-    90|      |-      |   124|+			fi
   347|      |-   249|      |-   218|      |-    91|      |-      |   125|+
   348|      |-   250|      |-   219|      |-    92|      |-      |   126|+			$(echo >> changes.log) #to add newline
   349|      |-   251|      |-   220|      |-    93|      |-      |   127|+
   350|      |-   252|      |-   221|      |-    94|      |-      |   128|+
   351|      |-   253|      |-   222|      |-    95|      |-    93|   129|fi
   352|      |-   254|      |-   223|      |-    96|      |-    94|   130|
   353|      |-   255|      |-   224|      |-    97|      |-    95|   131|fi
   354|      |-   256|      |-   225|      |-    98|      |-
   355|      |-   257|      |-   226|      |-    99|      |-File diff: Assign1/testscript.sh
   356|      |-   258|      |-   227|      |-   100|      |-     1|     1|#!/git-bash.exe
   357|      |-   259|      |-   228|      |-   101|      |-     2|     2|
   358|      |-   260|      |-   229|      |-   102|      |-     3|      |-Status=$(sed -e "s/^diff --git.*/1/;s/^index.*/2/;s/^---.*/3/;s/^+++.*/4/;s/^@@.*/5/;s/[^1-5]/6/;s/\(.\).*/\1/" < test.txt)
   359|      |-   261|      |-   230|      |-   103|      |-      |     3|+Status=$(echo >> changes.log)
   360|      |-   262|      |-   231|      |-   104|      |-     4|     4|echo $Status
   361|      |-_________________________
   362|      |-
   363|      |-File diff: Assign1/testscript.sh
   364|      |-     1|     1| #!/git-bash.exe
   365|      |-     2|     2| 
   366|      |-     3|      |-Status=$(echo >> changes.log)
   367|      |-      |     3|+PadLength=15
   368|      |-      |     4|+String="test"
   369|      |-      |     5|+printf '%0.*s%s' $PadLength "$(printf '%0.1s' " "{1..100})" "$String"
   370|      |-     4|     6| echo $Status
